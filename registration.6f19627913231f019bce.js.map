{"version":3,"sources":["webpack:///./js/api/clientStorage.js","webpack:///./js/registerForm.js","webpack:///./registration.js","webpack:///./settings/apiVariables.js","webpack:///./js/api/authApi.js"],"names":["clientStorage","getItem","key","value","localStorage","JSON","parse","undefined","setItem","payload","body","stringify","RegisterForm","selector","event","preventDefault","formData","FormData","form","forEach","authApi","register","rawResult","ok","json","result","reset","window","location","console","log","alert","text","statusText","this","document","querySelector","addListeners","addEventListener","submitHandler","init","settings","BASE_URL","name","email","password","fetch","method","headers","login"],"mappings":"2FAAA,IAAMA,EAAgB,CAClBC,QADkB,SACVC,GACN,IAAMC,EAAQC,aAAaH,QAAQC,GACnC,OAAOC,EAAQE,KAAKC,MAAMH,QAASI,GAErCC,QALkB,SAKVN,EAAKO,GACX,IAAMC,EAAOL,KAAKM,UAAUF,GAC5BL,aAAaI,QAAQN,EAAKQ,KAIfV,O,oRCqCFY,E,WAzCb,WAAYC,GAAU,I,MAAA,O,EAAA,K,EAAA,gB,EAAA,e,EAAA,G,EAAA,yBAIN,WAAMC,GAAN,mGACdA,EAAMC,iBAEAC,EAAW,IAAIC,SAAS,EAAKC,MAC7BR,EAAO,GAEbM,EAASG,SAAQ,SAAChB,EAAOD,GACvBQ,EAAKR,GAAOC,KAPA,kBAWYiB,IAAQC,SAASX,GAX7B,WAWNY,EAXM,QAYGC,GAZH,uBAaJD,EAbI,yBAgBSA,EAAUE,OAhBnB,QAgBNC,EAhBM,OAiBZzB,IAAcQ,QAAQ,UAAWiB,GACjC,EAAKP,KAAKQ,QACVC,OAAOC,SAAW,KAnBN,kDAqBZC,QAAQC,IAAR,MACAC,gBAAM,CACJC,KAAM,KAAMC,aAvBF,yD,+KAJM,sD,6FACpBC,KAAKhB,KAAOiB,SAASC,cAAcvB,G,2BA+BrCwB,aAAA,WACEH,KAAKhB,KAAKoB,iBAAiB,SAAUJ,KAAKK,gB,EAG5CC,KAAA,WACEN,KAAKG,gB,eCxCY,IAAIzB,EAAa,SACzB4B,Q,2FCJN,IAAMC,EAAW,CACpBC,SAAU,0C,0YCANA,E,UAAaD,EAAbC,SAEFtB,EAAU,CACRC,SADQ,YAC4B,oJAAzBsB,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACtBnC,EAAOL,KAAKM,UAAU,CAAEgC,OAAMC,QAAOC,aADH,SAGnBC,MAASJ,EAAJ,kBAA+B,CACvDhC,OACAqC,OAAQ,OACRC,QAAS,CACP,eAAgB,sBAPoB,cAGlCvB,EAHkC,yBAWjCA,GAXiC,8CAcpCwB,MAfQ,YAemB,kJAAnBL,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACbnC,EAAOL,KAAKM,UAAU,CAAEiC,QAAOC,aADN,SAGVC,MAASJ,EAAJ,eAA4B,CACpDhC,OACAqC,OAAQ,OACRC,QAAS,CACP,eAAgB,sBAPW,cAGzBvB,EAHyB,yBAWxBA,GAXwB,+CAepBL,Q","file":"registration.6f19627913231f019bce.js","sourcesContent":["const clientStorage = {\n    getItem(key) {\n      const value = localStorage.getItem(key);\n      return value ? JSON.parse(value) : undefined;\n    },\n    setItem(key, payload) {\n      const body = JSON.stringify(payload);\n      localStorage.setItem(key, body);\n    },\n  };\n  \n  export default clientStorage;","import authApi from './api/authApi';\nimport clientStorage from './api/clientStorage';\nimport { alert } from '@pnotify/core';\nimport '@pnotify/core/dist/PNotify.css';\nimport '@pnotify/core/dist/BrightTheme.css';\n\nclass RegisterForm {\n  constructor(selector) {\n    this.form = document.querySelector(selector);\n  }\n\n  submitHandler = async event => {\n    event.preventDefault();\n\n    const formData = new FormData(this.form);\n    const body = {};\n\n    formData.forEach((value, key) => {\n      body[key] = value;\n    });\n\n    try {\n      const rawResult = await authApi.register(body);\n      if (!rawResult.ok) {\n        throw rawResult;\n      }\n\n      const result = await rawResult.json();\n      clientStorage.setItem('session', result);\n      this.form.reset();\n      window.location = './';\n    } catch (error) {\n      console.log(error);\n      alert({\n        text: error.statusText,\n      });\n    }\n  };\n\n  addListeners() {\n    this.form.addEventListener('submit', this.submitHandler);\n  }\n\n  init() {\n    this.addListeners();\n  }\n}\n\nexport default RegisterForm;","import RegisterForm from './js/registerForm';\n\nimport './css/styles.css';\n\nconst registerForm = new RegisterForm('.form');\nregisterForm.init();\n","\nexport const settings = {\n    BASE_URL: 'https://apt-booking-api.herokuapp.com',\n  };","import { settings } from '../../settings';\n\nconst { BASE_URL } = settings;\n\nconst authApi = {\n  async register({ name, email, password }) {\n    const body = JSON.stringify({ name, email, password });\n\n    const result = await fetch(`${BASE_URL}/users/register`, {\n      body,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    return result;\n  },\n\n  async login({ email, password }) {\n    const body = JSON.stringify({ email, password });\n\n    const result = await fetch(`${BASE_URL}/users/login`, {\n      body,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    return result;\n  },\n};\n\nexport default authApi;"],"sourceRoot":""}