{"version":3,"sources":["webpack:///./js/api/clientStorage.js","webpack:///./js/LoginForm.js","webpack:///./login.js","webpack:///./settings/apiVariables.js","webpack:///./js/api/authApi.js"],"names":["clientStorage","getItem","key","value","localStorage","JSON","parse","undefined","setItem","payload","body","stringify","LoginForm","selector","this","form","document","querySelector","submitHandler","bind","event","preventDefault","formData","FormData","forEach","authApi","login","rawResult","ok","json","result","reset","window","location","console","error","alert","text","statusText","addListeners","addEventListener","init","settings","BASE_URL","register","name","email","password","fetch","method","headers"],"mappings":"2FAAA,IAAMA,EAAgB,CAClBC,QADkB,SACVC,GACN,IAAMC,EAAQC,aAAaH,QAAQC,GACnC,OAAOC,EAAQE,KAAKC,MAAMH,QAASI,GAErCC,QALkB,SAKVN,EAAKO,GACX,IAAMC,EAAOL,KAAKM,UAAUF,GAC5BL,aAAaI,QAAQN,EAAKQ,KAIfV,O,2SCsCFY,E,WA1Cb,WAAYC,GACVC,KAAKC,KAAOC,SAASC,cAAcJ,GACnCC,KAAKI,cAAgBJ,KAAKI,cAAcC,KAAKL,M,2BAGzCI,c,+CAAN,WAAoBE,GAApB,mGACEA,EAAMC,iBAEAC,EAAW,IAAIC,SAAST,KAAKC,MAC7BL,EAAO,GAEbY,EAASE,SAAQ,SAACrB,EAAOD,GACvBQ,EAAKR,GAAOC,KAPhB,kBAW4BsB,IAAQC,MAAMhB,GAX1C,WAWUiB,EAXV,QAYmBC,GAZnB,uBAaYD,EAbZ,yBAgByBA,EAAUE,OAhBnC,QAgBUC,EAhBV,OAiBI9B,IAAcQ,QAAQ,UAAWsB,GACjChB,KAAKC,KAAKgB,QACVC,OAAOC,SAAW,KAnBtB,kDAqBIC,QAAQC,MAAR,MACAC,gBAAM,CACJC,KAAM,KAAMC,aAvBlB,yD,uOA4BAC,aAAA,WACEzB,KAAKC,KAAKyB,iBAAiB,SAAU1B,KAAKI,gB,EAG5CuB,KAAA,WACE3B,KAAKyB,gB,eCzCS,IAAI3B,EAAU,eACtB6B,Q,oECJH,IAAMC,EAAW,CACpBC,SAAU,0C,0YCANA,E,UAAaD,EAAbC,SAEFlB,EAAU,CACRmB,SADQ,YAC4B,oJAAzBC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACtBrC,EAAOL,KAAKM,UAAU,CAAEkC,OAAMC,QAAOC,aADH,SAGnBC,MAASL,EAAJ,kBAA+B,CACvDjC,OACAuC,OAAQ,OACRC,QAAS,CACP,eAAgB,sBAPoB,cAGlCpB,EAHkC,yBAWjCA,GAXiC,8CAcpCJ,MAfQ,YAemB,kJAAnBoB,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACbrC,EAAOL,KAAKM,UAAU,CAAEmC,QAAOC,aADN,SAGVC,MAASL,EAAJ,eAA4B,CACpDjC,OACAuC,OAAQ,OACRC,QAAS,CACP,eAAgB,sBAPW,cAGzBpB,EAHyB,yBAWxBA,GAXwB,+CAepBL,Q","file":"login.6e36be19d8d2a423faaf.js","sourcesContent":["const clientStorage = {\n    getItem(key) {\n      const value = localStorage.getItem(key);\n      return value ? JSON.parse(value) : undefined;\n    },\n    setItem(key, payload) {\n      const body = JSON.stringify(payload);\n      localStorage.setItem(key, body);\n    },\n  };\n  \n  export default clientStorage;","import authApi from './api/authApi';\nimport clientStorage from './api/clientStorage';\nimport { alert } from '@pnotify/core';\nimport '@pnotify/core/dist/PNotify.css';\nimport '@pnotify/core/dist/BrightTheme.css';\n\nclass LoginForm {\n  constructor(selector) {\n    this.form = document.querySelector(selector);\n    this.submitHandler = this.submitHandler.bind(this);\n  }\n\n  async submitHandler(event) {\n    event.preventDefault();\n\n    const formData = new FormData(this.form);\n    const body = {};\n\n    formData.forEach((value, key) => {\n      body[key] = value;\n    });\n\n    try {\n      const rawResult = await authApi.login(body);\n      if (!rawResult.ok) {\n        throw rawResult;\n      }\n\n      const result = await rawResult.json();\n      clientStorage.setItem('session', result);\n      this.form.reset();\n      window.location = './';\n    } catch (error) {\n      console.error(error);\n      alert({\n        text: error.statusText,\n      });\n    }\n  }\n\n  addListeners() {\n    this.form.addEventListener('submit', this.submitHandler);\n  }\n\n  init() {\n    this.addListeners();\n  }\n}\n\nexport default LoginForm;","import LoginForm from './js/LoginForm';\n\nimport './css/styles.css';\n\nconst loginForm = new LoginForm('.login-form');\nloginForm.init();","\nexport const settings = {\n    BASE_URL: 'https://apt-booking-api.herokuapp.com',\n  };","import { settings } from '../../settings';\n\nconst { BASE_URL } = settings;\n\nconst authApi = {\n  async register({ name, email, password }) {\n    const body = JSON.stringify({ name, email, password });\n\n    const result = await fetch(`${BASE_URL}/users/register`, {\n      body,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    return result;\n  },\n\n  async login({ email, password }) {\n    const body = JSON.stringify({ email, password });\n\n    const result = await fetch(`${BASE_URL}/users/login`, {\n      body,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    return result;\n  },\n};\n\nexport default authApi;"],"sourceRoot":""}